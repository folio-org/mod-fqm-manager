{
  id: '4c63c7f5-1a28-4394-b401-98c02c31492d',
  name: 'drv_fund_details',
  private: true,
  columns: [
    {
      name: 'id',
      dataType: {
        dataType: 'rangedUUIDType',
      },
      sourceAlias: 'fund',
      queryable: true,
      visibleByDefault: false,
      isIdColumn: true,
      valueGetter: ":sourceAlias.id"
    },
    {
      name: 'version',
      dataType: {
        dataType: 'integerType',
      },
      sourceAlias: 'fund',
      queryable: true,
      visibleByDefault: false,
      valueGetter: "(:sourceAlias.jsonb ->> '_version')::integer",
      valueFunction: '(:value)::integer'
    },
    {
      name: 'allocated_from_ids',
      dataType: {
        dataType: 'arrayType',
        itemDataType: {
          dataType: 'rangedUUIDType',
        },
      },
      sourceAlias: 'fund',
      queryable: true,
      visibleByDefault: false,
      valueGetter: "(SELECT array_agg(alc_id.value::text) FILTER (WHERE (alc_id.value::text) IS NOT NULL) AS array_agg FROM jsonb_array_elements_text(:sourceAlias.jsonb -> 'allocatedFromIds'::text) alc_id(value))",
      filterValueGetter: "( SELECT array_agg(lower(alc_id.value::text)) FILTER (WHERE (alc_id.value::text) IS NOT NULL) AS array_agg FROM jsonb_array_elements_text(:sourceAlias.jsonb -> 'allocatedFromIds'::text) alc_id(value))",
      valueFunction: 'lower(:value)'
    },
    {
      name: 'allocated_to_ids',
      dataType: {
        dataType: 'arrayType',
        itemDataType: {
          dataType: 'rangedUUIDType',
        },
      },
      sourceAlias: 'fund',
      queryable: true,
      visibleByDefault: false,
      valueGetter: "(SELECT array_agg(alc_id.value::text) FILTER (WHERE (alc_id.value::text) IS NOT NULL) AS array_agg FROM jsonb_array_elements_text(:sourceAlias.jsonb -> 'allocatedToIds'::text) alc_id(value))",
      filterValueGetter: "( SELECT array_agg(lower(alc_id.value::text)) FILTER (WHERE (alc_id.value::text) IS NOT NULL) AS array_agg FROM jsonb_array_elements_text(:sourceAlias.jsonb -> 'allocatedToIds'::text) alc_id(value))",
      valueFunction: 'lower(:value)'
    },
    {
      name: 'code',
      dataType: {
        dataType: 'stringType',
      },
      sourceAlias: 'fund',
      queryable: true,
      visibleByDefault: false,
      valueGetter: ":sourceAlias.jsonb ->> 'code'",
      filterValueGetter: "lower(${tenant_id}_mod_finance_storage.f_unaccent(:sourceAlias.jsonb ->> 'code'::text))",
      valueFunction: 'lower(${tenant_id}_mod_finance_storage.f_unaccent(:value))'
    },
    {
      name: 'description',
      dataType: {
        dataType: 'stringType',
      },
      sourceAlias: 'fund',
      queryable: true,
      visibleByDefault: false,
      valueGetter: ":sourceAlias.jsonb ->> 'description'"
    },
    {
      name: 'external_account_no',
      dataType: {
        dataType: 'stringType',
      },
      sourceAlias: 'fund',
      queryable: true,
      visibleByDefault: false,
      valueGetter: ":sourceAlias.jsonb ->> 'externalAccountNo'"
    },
    {
      name: 'fund_status',
      dataType: {
        dataType: 'stringType',
      },
      sourceAlias: 'fund',
      values: [
        {
          label: 'Active',
          value: 'Active',
        },
        {
          label: 'Frozen',
          value: 'Frozen',
        },
        {
          label: 'Inactive',
          value: 'Inactive',
        },
      ],
      queryable: true,
      visibleByDefault: false,
      valueGetter: ":sourceAlias.jsonb ->> 'fundStatus'",
      filterValueGetter: "lower(${tenant_id}_mod_finance_storage.f_unaccent(:sourceAlias.jsonb ->> 'fundStatus'::text))",
      valueFunction: 'lower(${tenant_id}_mod_finance_storage.f_unaccent(:value))'
    },
    {
      name: 'fund_type_id',
      dataType: {
        dataType: 'rangedUUIDType',
      },
      sourceAlias: 'fund',
      queryable: true,
      visibleByDefault: false,
      valueGetter: ":sourceAlias.jsonb ->> 'fundTypeId'"
    },
    {
      name: 'ledger_id',
      dataType: {
        dataType: 'rangedUUIDType',
      },
      sourceAlias: 'fund',
      queryable: true,
      visibleByDefault: false,
      valueGetter: ":sourceAlias.jsonb ->> 'ledgerId'"
    },
    {
      name: 'name',
      dataType: {
        dataType: 'stringType',
      },
      sourceAlias: 'fund',
      queryable: true,
      visibleByDefault: false,
      valueGetter: ":sourceAlias.jsonb ->> 'name'",
    },
    {
      name: 'donor_organization_ids',
      dataType: {
        dataType: 'arrayType',
        itemDataType: {
          dataType: 'rangedUUIDType',
        },
      },
      sourceAlias: 'fund',
      queryable: false,
      visibleByDefault: false,
      valueGetter: "(SELECT array_agg(dorg_id.value::text) FILTER (WHERE (dorg_id.value::text) IS NOT NULL) AS array_agg FROM jsonb_array_elements_text(:sourceAlias.jsonb -> 'donorOrganizationIds'::text) dorg_id(value))",
      filterValueGetter: "( SELECT array_agg(lower(dorg_id.value::text)) FILTER (WHERE (dorg_id.value::text) IS NOT NULL) AS array_agg FROM jsonb_array_elements_text(:sourceAlias.jsonb -> 'donorOrganizationIds'::text) dorg_id(value))",
      valueFunction: 'lower(:value)'


    },
    {
      name: 'restrict_by_locations',
      dataType: {
        dataType: 'booleanType',
      },
      sourceAlias: 'fund',
      values: [
        {
          label: 'True',
          value: 'true',
        },
        {
          label: 'False',
          value: 'false',
        },
      ],
      queryable: true,
      visibleByDefault: false,
      valueGetter: ":sourceAlias.jsonb ->> 'restrictByLocations'"
    },
    {
      name: 'created_date',
      dataType: {
        dataType: 'dateType',
      },
      sourceAlias: 'fund',
      queryable: true,
      visibleByDefault: false,
      valueGetter: ":sourceAlias.jsonb -> 'metadata' ->> 'createdDate'"
    },
    {
      name: 'updated_date',
      dataType: {
        dataType: 'dateType',
      },
      sourceAlias: 'fund',
      queryable: true,
      visibleByDefault: false,
      valueGetter: ":sourceAlias.jsonb -> 'metadata' ->> 'updatedDate'"
    },
    {
      name: 'created_by_user_id',
      dataType: {
        dataType: 'rangedUUIDType',
      },
      sourceAlias: 'fund',
      queryable: true,
      visibleByDefault: false,
      valueGetter: ":sourceAlias.jsonb -> 'metadata' ->> 'createdByUserId'"
    },
    {
      name: 'updated_by_user_id',
      dataType: {
        dataType: 'rangedUUIDType',
      },
      sourceAlias: 'fund',
      queryable: true,
      visibleByDefault: false,
      valueGetter: ":sourceAlias.jsonb -> 'metadata' ->> 'updatedByUserId'"
    },
    {
      name: 'created_by_username',
      dataType: {
        dataType: 'stringType',
      },
      sourceAlias: 'fund',
      queryable: true,
      visibleByDefault: false,
      valueGetter: ":sourceAlias.jsonb -> 'metadata' ->> 'createdByUsername'"
    },
    {
      name: 'updated_by_username',
      dataType: {
        dataType: 'stringType',
      },
      sourceAlias: 'fund',
      queryable: true,
      visibleByDefault: false,
      valueGetter: ":sourceAlias.jsonb -> 'metadata' ->> 'updatedByUsername'"
    },
    {
      name: 'tag_list',
      dataType: {
        dataType: 'arrayType',
        itemDataType: {
          dataType: 'stringType',
        },
      },
      sourceAlias: 'fund',
      queryable: false,
      visibleByDefault: false,
      valueGetter: "( SELECT array_agg(tnt_id.value::text) FILTER (WHERE (tnt_id.value::text) IS NOT NULL) AS array_agg FROM jsonb_array_elements_text(:sourceAlias.jsonb -> 'tags' ->'tagList'::text) tnt_id(value))",
      filterValueGetter: "( SELECT array_agg(lower(tnt_id.value::text)) FILTER (WHERE (tnt_id.value::text) IS NOT NULL) AS array_agg FROM jsonb_array_elements_text(:sourceAlias.jsonb -> 'tags' ->'tagList'::text) tnt_id(value))",
      valueFunction: 'lower(:value)'
    },
    {
      name: 'locations',
      dataType: {
        dataType: 'arrayType',
        itemDataType: {
          dataType: 'objectType',
          properties: [
            {
              name: 'location_id',
              property: 'locationId',
              dataType: {
                dataType: 'rangedUUIDType',
              },
              queryable: false,
              valueGetter: "( SELECT array_agg(elems.value ->> 'locationId') FROM jsonb_array_elements(:sourceAlias.jsonb -> 'locations') AS elems)",
              filterValueGetter: "( SELECT array_agg(lower(elems.value ->> 'locationId')) FROM jsonb_array_elements(:sourceAlias.jsonb -> 'locations') AS elems)",
              valueFunction: 'lower(:value)',
            },
            {
              name: 'tenant_id',
              property: 'tenantId',
              dataType: {
                dataType: 'rangedUUIDType',
              },
              queryable: false,
              valueGetter: "( SELECT array_agg(elems.value ->> 'tenantId') FROM jsonb_array_elements(:sourceAlias.jsonb -> 'locations') AS elems)",
              filterValueGetter: "( SELECT array_agg(lower(elems.value ->> 'tenantId')) FROM jsonb_array_elements(:sourceAlias.jsonb -> 'locations') AS elems)",
              valueFunction: 'lower(:value)',
            }
          ],
        },
      },
      sourceAlias: 'fund',
      visibleByDefault: false,
      valueGetter: ":sourceAlias.jsonb ->> 'locations'",
    },
    {
      name: 'acq_unit_ids',
      dataType: {
        dataType: 'arrayType',
        itemDataType: {
          dataType: 'rangedUUIDType',
        },
      },
      sourceAlias: 'fund',
      queryable: false,
      visibleByDefault: false,
      valueGetter: "( SELECT array_agg(acq_id.value::text) FILTER (WHERE (acq_id.value::text) IS NOT NULL) AS array_agg FROM jsonb_array_elements_text(:sourceAlias.jsonb -> 'acqUnitIds'::text) acq_id(value))",
      filterValueGetter: "( SELECT array_agg(lower(acq_id.value::text)) FILTER (WHERE (acq_id.value::text) IS NOT NULL) AS array_agg FROM jsonb_array_elements_text(:sourceAlias.jsonb -> 'acqUnitIds'::text) acq_id(value))",
      valueFunction: 'lower(:value)'
    }
  ],
  sources: [
    {
      type: 'db',
      alias: 'fund',
      target: 'src_finance_fund'
    }
  ],
  defaultSort: [
    {
      columnName: 'id',
      direction: 'ASC',
    },
  ],
}
